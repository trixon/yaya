/*
 * Copyright 2022 Patrik Karlstr√∂m <patrik@trixon.se>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.yaya;

import javax.swing.event.ChangeListener;

final class YayaOptionsPanel extends javax.swing.JPanel {

    private final YayaOptionsPanelController mController;
    private final Options mOptions = Options.getInstance();

    YayaOptionsPanel(YayaOptionsPanelController controller) {
        mController = controller;
        initComponents();
        ChangeListener changeListener = changeEvent -> {
            boolean changed = indicatorsCheckBox.isSelected() != mOptions.isShowingIndicators();

            if (changed) {
            }
            mController.changed();
        };

        indicatorsCheckBox.addChangeListener(changeListener);
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkboxPanel = new javax.swing.JPanel();
        indicatorsCheckBox = new javax.swing.JCheckBox();
        maxCheckBox = new javax.swing.JCheckBox();
        symbolsCheckBox = new javax.swing.JCheckBox();
        topCheckBox = new javax.swing.JCheckBox();
        colorLabel = new javax.swing.JLabel();
        colorComboBox = new javax.swing.JComboBox<>();
        opacityLabel = new javax.swing.JLabel();
        opacitySlider = new javax.swing.JSlider();
        reverseDirectionCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(indicatorsCheckBox, org.openide.util.NbBundle.getMessage(YayaOptionsPanel.class, "OptionsPanel.showIndicatorsCheckBox.text")); // NOI18N
        checkboxPanel.add(indicatorsCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(maxCheckBox, org.openide.util.NbBundle.getMessage(YayaOptionsPanel.class, "OptionsPanel.showMaxCheckBox.text")); // NOI18N
        checkboxPanel.add(maxCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(symbolsCheckBox, org.openide.util.NbBundle.getMessage(YayaOptionsPanel.class, "OptionsPanel.showSymbolsCheckBox.text")); // NOI18N
        checkboxPanel.add(symbolsCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(topCheckBox, org.openide.util.NbBundle.getMessage(YayaOptionsPanel.class, "OptionsPanel.showTopCheckBox.text")); // NOI18N
        checkboxPanel.add(topCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(colorLabel, org.openide.util.NbBundle.getMessage(YayaOptionsPanel.class, "YayaOptionsPanel.colorLabel.text")); // NOI18N

        colorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.openide.awt.Mnemonics.setLocalizedText(opacityLabel, org.openide.util.NbBundle.getMessage(YayaOptionsPanel.class, "YayaOptionsPanel.opacityLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(reverseDirectionCheckBox, org.openide.util.NbBundle.getMessage(YayaOptionsPanel.class, "YayaOptionsPanel.reverseDirectionCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkboxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(colorLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(opacityLabel)
                                    .addComponent(opacitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(reverseDirectionCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(checkboxPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorLabel)
                    .addComponent(opacityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(opacitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reverseDirectionCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        indicatorsCheckBox.setSelected(mOptions.isShowingIndicators());
        maxCheckBox.setSelected(mOptions.isShowingMaxColumn());
        symbolsCheckBox.setSelected(mOptions.isShowingSymbols());
        topCheckBox.setSelected(mOptions.isShowingTopColumn());
        reverseDirectionCheckBox.setSelected(mOptions.isReverseDirection());
        opacitySlider.setValue(mOptions.getOpacity());

    }

    void store() {
        mOptions.setShowIndicators(indicatorsCheckBox.isSelected());
        mOptions.setShowMaxColumn(maxCheckBox.isSelected());
        mOptions.setShowSymbols(symbolsCheckBox.isSelected());
        mOptions.setShowTopColumn(topCheckBox.isSelected());
        mOptions.setReverseDirection(reverseDirectionCheckBox.isSelected());
        mOptions.setOpacity(opacitySlider.getValue());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel checkboxPanel;
    private javax.swing.JComboBox<String> colorComboBox;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JCheckBox indicatorsCheckBox;
    private javax.swing.JCheckBox maxCheckBox;
    private javax.swing.JLabel opacityLabel;
    private javax.swing.JSlider opacitySlider;
    private javax.swing.JCheckBox reverseDirectionCheckBox;
    private javax.swing.JCheckBox symbolsCheckBox;
    private javax.swing.JCheckBox topCheckBox;
    // End of variables declaration//GEN-END:variables
}
