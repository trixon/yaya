/*
 * Copyright 2022 Patrik Karlström <patrik@trixon.se>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.yaya;

import java.util.Random;
import java.util.TreeSet;
import javax.swing.Box;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import org.apache.commons.lang3.StringUtils;
import se.trixon.almond.util.Dict;
import se.trixon.almond.util.swing.SwingHelper;

/**
 *
 * @author Patrik Karlström
 */
public class PlayersPanel extends javax.swing.JPanel {

    private int mMaxNumOfPlayers;
    private JComboBox<String>[] mNameComboBoxes;
    private final Options mOptions = Options.getInstance();

    /**
     * Creates new form PlayersPanel
     */
    public PlayersPanel() {
        initComponents();
        setMaxNumOfPlayers(8);
    }

    public void load() {
        initCombos();
        String storedNames = mOptions.get(Options.KEY_PLAYERS, Options.DEFAULT_PLAYERS);

        if (!StringUtils.isBlank(storedNames)) {
            var names = StringUtils.split(storedNames, ';');
            for (int i = 0; i < mNameComboBoxes.length; i++) {
                var comboBox = mNameComboBoxes[i];
                comboBox.setSelectedItem(names[i]);
            }
        }

        numberSpinner.setValue(mOptions.getNumOfPlayers());
        numberSpinnerStateChanged(null);
    }

    public void save() {
        var names = new String[mMaxNumOfPlayers];
        var allNames = new TreeSet<String>();

        for (int i = 0; i < mNameComboBoxes.length; i++) {
            var comboBox = mNameComboBoxes[i];
            names[i] = (String) comboBox.getSelectedItem();
            allNames.add((String) comboBox.getEditor().getItem());

            for (int j = 0; j < comboBox.getModel().getSize(); j++) {
                String name = comboBox.getModel().getElementAt(j);
                allNames.add(name);
            }
        }

        mOptions.put(Options.KEY_PLAYERS, String.join(";", names));
        mOptions.put(Options.KEY_PLAYERS_ALL, String.join(";", allNames));
        mOptions.setNumOfPlayers(getNumOfPlayers());
    }

    private int getNumOfPlayers() {
        return (int) numberSpinner.getValue();
    }

    private void setMaxNumOfPlayers(int maxNumOfPlayers) {
        mMaxNumOfPlayers = maxNumOfPlayers;
        numberSpinner.setModel(new SpinnerNumberModel(1, 1, maxNumOfPlayers, 1));

        mNameComboBoxes = new JComboBox[mMaxNumOfPlayers];
        leftPanel.removeAll();
        rightPanel.removeAll();
        JPanel parent;

        for (int i = 0; i < mMaxNumOfPlayers; i++) {
            mNameComboBoxes[i] = new JComboBox<>();
            parent = (i & 1) == 0 ? leftPanel : rightPanel;
            parent.add(mNameComboBoxes[i]);
            parent.add(Box.createVerticalStrut(SwingHelper.getUIScaled(8)));
        }

        initCombos();
    }

    private void initCombos() {
        var names = StringUtils.split(mOptions.get(Options.KEY_PLAYERS_ALL, Options.DEFAULT_PLAYERS_ALL), ";");

        for (var comboBox : mNameComboBoxes) {
            comboBox.setModel(new DefaultComboBoxModel<>(names));
            comboBox.setEditable(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        titleLabel = new javax.swing.JLabel();
        numberSpinner = new javax.swing.JSpinner();
        shuffleButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        rightPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(titleLabel.getFont().deriveFont(titleLabel.getFont().getStyle() | java.awt.Font.BOLD, titleLabel.getFont().getSize()+4));
        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, Dict.Game.PLAYERS.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        add(titleLabel, gridBagConstraints);

        numberSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));
        numberSpinner.setMinimumSize(new java.awt.Dimension(64, 26));
        numberSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(numberSpinner, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(shuffleButton, Dict.Game.SHUFFLE.toString());
        shuffleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(shuffleButton, gridBagConstraints);

        mainPanel.setLayout(new java.awt.GridLayout(1, 0, 8, 0));

        leftPanel.setLayout(new javax.swing.BoxLayout(leftPanel, javax.swing.BoxLayout.PAGE_AXIS));
        mainPanel.add(leftPanel);

        rightPanel.setLayout(new javax.swing.BoxLayout(rightPanel, javax.swing.BoxLayout.PAGE_AXIS));
        mainPanel.add(rightPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        add(mainPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void numberSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberSpinnerStateChanged
        int players = getNumOfPlayers();
        for (int i = 0; i < mMaxNumOfPlayers; i++) {
            mNameComboBoxes[i].setEnabled(i < players);
        }
    }//GEN-LAST:event_numberSpinnerStateChanged

    private void shuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleButtonActionPerformed
        int numOfPlayers = getNumOfPlayers();
        var r = new Random();

        for (int i = 0; i < numOfPlayers; i++) {
            int swapWith = r.nextInt(numOfPlayers);
            var name0 = mNameComboBoxes[i];
            var name1 = mNameComboBoxes[swapWith];
            var editor0 = name0.getEditor();
            var editor1 = name1.getEditor();
            String temp = (String) editor0.getItem();
            name0.setSelectedItem(editor1.getItem());
            name1.setSelectedItem(temp);
        }
    }//GEN-LAST:event_shuffleButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSpinner numberSpinner;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton shuffleButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
