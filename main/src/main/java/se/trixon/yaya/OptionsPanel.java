/*
 * Copyright 2024 Patrik Karlström <patrik@trixon.se>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.yaya;

import javax.swing.DefaultComboBoxModel;
import se.trixon.almond.util.Dict;
import se.trixon.almond.util.swing.DelayedResetRunner;
import se.trixon.yaya.themes.Theme;

/**
 *
 * @author Patrik Karlström <patrik@trixon.se>
 */
public class OptionsPanel extends javax.swing.JPanel {

    private final DelayedResetRunner fontResetRunner;
    private final Options mOptions = Options.getInstance();
    private final ThemeManager mThemeManager = ThemeManager.getInstance();

    /**
     * Creates new form OptionsPanel
     */
    public OptionsPanel() {
        fontResetRunner = new DelayedResetRunner(50, () -> {
            mOptions.setFontSize(sizeSlider.getValue());
        });

        initComponents();
        initListeners();
        loadOptions();
    }

    private void initListeners() {
        mOptions.getPreferences().addPreferenceChangeListener(pce -> {
            loadOptions();
        });

        themeComboBox.setModel(new DefaultComboBoxModel<>(mThemeManager.getThemes()));
        themeComboBox.setSelectedItem(mThemeManager.getTheme());
    }

    private void loadOptions() {
        limCheckBox.setSelected(mOptions.isShowLimColumn());
        maxCheckBox.setSelected(mOptions.isShowMaxColumn());
        indicatorCheckBox.setSelected(mOptions.isShowIndicators());
        reverseScrollCheckBox.setSelected(mOptions.isReverseDirection());
        sizeSlider.setValue(mOptions.getFontSize());
        soundCheckBox.setSelected(mOptions.is(Options.KEY_PLAY_SOUND, Options.DEFAULT_PLAY_SOUND));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scorecardPanel = new javax.swing.JPanel();
        themeLabel = new javax.swing.JLabel();
        themeComboBox = new javax.swing.JComboBox<>();
        sizeLabel = new javax.swing.JLabel();
        sizeSlider = new javax.swing.JSlider();
        limCheckBox = new javax.swing.JCheckBox();
        maxCheckBox = new javax.swing.JCheckBox();
        indicatorCheckBox = new javax.swing.JCheckBox();
        systemPanel = new javax.swing.JPanel();
        soundCheckBox = new javax.swing.JCheckBox();
        reverseScrollCheckBox = new javax.swing.JCheckBox();

        scorecardPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.scorecardPanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(themeLabel, Dict.THEME.toString());

        themeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sizeLabel, Dict.SIZE.toString());

        sizeSlider.setMaximum(72);
        sizeSlider.setMinimum(8);
        sizeSlider.setValue(8);
        sizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sizeSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(limCheckBox, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.limCheckBox.text")); // NOI18N
        limCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.limCheckBox.toolTipText")); // NOI18N
        limCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(maxCheckBox, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.maxCheckBox.text")); // NOI18N
        maxCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.maxCheckBox.toolTipText")); // NOI18N
        maxCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(indicatorCheckBox, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.indicatorCheckBox.text")); // NOI18N
        indicatorCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.indicatorCheckBox.toolTipText")); // NOI18N
        indicatorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indicatorCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scorecardPanelLayout = new javax.swing.GroupLayout(scorecardPanel);
        scorecardPanel.setLayout(scorecardPanelLayout);
        scorecardPanelLayout.setHorizontalGroup(
            scorecardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scorecardPanelLayout.createSequentialGroup()
                .addGroup(scorecardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(themeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(scorecardPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(scorecardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(scorecardPanelLayout.createSequentialGroup()
                                .addGroup(scorecardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(themeLabel)
                                    .addComponent(sizeLabel)
                                    .addComponent(limCheckBox)
                                    .addComponent(maxCheckBox)
                                    .addComponent(indicatorCheckBox))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        scorecardPanelLayout.setVerticalGroup(
            scorecardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scorecardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(themeLabel)
                .addGap(0, 0, 0)
                .addComponent(themeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sizeLabel)
                .addGap(0, 0, 0)
                .addComponent(sizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indicatorCheckBox)
                .addContainerGap())
        );

        systemPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(Dict.SYSTEM.toString()));

        org.openide.awt.Mnemonics.setLocalizedText(soundCheckBox, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.soundCheckBox.text")); // NOI18N
        soundCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(reverseScrollCheckBox, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.reverseScrollCheckBox.text")); // NOI18N
        reverseScrollCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseScrollCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout systemPanelLayout = new javax.swing.GroupLayout(systemPanel);
        systemPanel.setLayout(systemPanelLayout);
        systemPanelLayout.setHorizontalGroup(
            systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(soundCheckBox)
                    .addComponent(reverseScrollCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        systemPanelLayout.setVerticalGroup(
            systemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(soundCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reverseScrollCheckBox)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scorecardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(systemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scorecardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(systemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void maxCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxCheckBoxActionPerformed
        mOptions.setShowMaxColumn(maxCheckBox.isSelected());
    }//GEN-LAST:event_maxCheckBoxActionPerformed

    private void limCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limCheckBoxActionPerformed
        mOptions.setShowLimColumn(limCheckBox.isSelected());
    }//GEN-LAST:event_limCheckBoxActionPerformed

    private void indicatorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indicatorCheckBoxActionPerformed
        mOptions.setShowIndicators(indicatorCheckBox.isSelected());
    }//GEN-LAST:event_indicatorCheckBoxActionPerformed

    private void reverseScrollCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseScrollCheckBoxActionPerformed
        mOptions.setReverseDirection(reverseScrollCheckBox.isSelected());
    }//GEN-LAST:event_reverseScrollCheckBoxActionPerformed

    private void sizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sizeSliderStateChanged
        fontResetRunner.reset();
    }//GEN-LAST:event_sizeSliderStateChanged

    private void themeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeComboBoxActionPerformed
        mOptions.setThemeId(((Theme) themeComboBox.getSelectedItem()).getId());
    }//GEN-LAST:event_themeComboBoxActionPerformed

    private void soundCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundCheckBoxActionPerformed
        mOptions.put(Options.KEY_PLAY_SOUND, soundCheckBox.isSelected());
    }//GEN-LAST:event_soundCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox indicatorCheckBox;
    private javax.swing.JCheckBox limCheckBox;
    private javax.swing.JCheckBox maxCheckBox;
    private javax.swing.JCheckBox reverseScrollCheckBox;
    private javax.swing.JPanel scorecardPanel;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JSlider sizeSlider;
    private javax.swing.JCheckBox soundCheckBox;
    private javax.swing.JPanel systemPanel;
    private javax.swing.JComboBox<Theme> themeComboBox;
    private javax.swing.JLabel themeLabel;
    // End of variables declaration//GEN-END:variables
}
