/*
 * Copyright 2018 Patrik Karlström.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nbgames.core.api.ui;

import java.util.Random;
import javax.swing.Box;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import org.apache.commons.lang3.StringUtils;
import org.nbgames.core.api.Player;
import org.nbgames.core.api.db.manager.PlayerManager;
import org.openide.util.NbPreferences;
import se.trixon.almond.util.Dict;

/**
 *
 * @author Patrik Karlström
 */
public class SelectPlayersPanel extends javax.swing.JPanel {

    private int mMaxNumOfPlayers;
    private JComboBox<Player>[] mCombos;
    private DefaultComboBoxModel<Player>[] mModels;

    /**
     * Creates new form PlayersPanel
     */
    public SelectPlayersPanel() {
        initComponents();
        setMaxNumOfPlayers(8);
    }

    public JLabel getLabel() {
        return numOfPlayersLabel;
    }

    public int getMaxNumOfPlayers() {
        return mMaxNumOfPlayers;
    }

    public int getNumOfPlayers() {
        return (Integer) numberSpinner.getValue();
    }

    public Player[] getPlayers() {
        int numOfPlayers = (Integer) numberSpinner.getValue();
        Player[] players = new Player[numOfPlayers];

        for (int i = 0; i < numOfPlayers; i++) {
            players[i] = (Player) mCombos[i].getSelectedItem();
        }

        return players;
    }

    public void restoreSelection(Class clazz) {
        initCombos();
        String joinedArray = NbPreferences.forModule(getClass()).get(clazz.getName(), "");
        if (!StringUtils.isBlank(joinedArray)) {
            String[] playerIds = StringUtils.split(joinedArray, ',');
            int i = 0;

            for (JComboBox<Player> combo : mCombos) {
                long id = Long.valueOf(playerIds[i]);
                for (int j = 0; j < combo.getModel().getSize(); j++) {
                    if (combo.getItemAt(j).getId() == id) {
                        combo.setSelectedIndex(j);
                        break;
                    }
                }
                i++;
            }
        }
    }

    public void saveSelection(Class clazz) {
        long[] playerIds = new long[mMaxNumOfPlayers];
        int i = 0;

        try {
            for (JComboBox<Player> combo : mCombos) {
                playerIds[i] = ((Player) combo.getSelectedItem()).getId();
                i++;
            }

            NbPreferences.forModule(getClass()).put(clazz.getName(), StringUtils.join(playerIds, ','));
        } catch (NullPointerException e) {
            // nvm
        }
    }

    public void setMaxNumOfPlayers(int maxNumOfPlayers) {
        mMaxNumOfPlayers = maxNumOfPlayers;
        numberSpinner.setModel(new SpinnerNumberModel(1, 1, maxNumOfPlayers, 1));

        mCombos = new JComboBox[mMaxNumOfPlayers];
        mModels = new DefaultComboBoxModel[mMaxNumOfPlayers];
        leftPanel.removeAll();
        rightPanel.removeAll();
        JPanel parent;

        for (int i = 0; i < mMaxNumOfPlayers; i++) {
            mCombos[i] = new JComboBox<>();
            parent = (i & 1) == 0 ? leftPanel : rightPanel;
            parent.add(mCombos[i]);
            parent.add(Box.createVerticalStrut(4));
        }

        initCombos();
    }

    public void setNumOfPlayers(int numOfPlayers) {
        numberSpinner.setValue(numOfPlayers);
        numberSpinnerStateChanged(null);
    }

    private void initCombos() {
        try {
            for (int i = 0; i < mMaxNumOfPlayers; i++) {
                mModels[i] = PlayerManager.getInstance().getComboBoxModel();
                mCombos[i].setModel(mModels[i]);
            }
        } catch (NullPointerException e) {
            // nvm
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        numOfPlayersLabel = new javax.swing.JLabel();
        numberSpinner = new javax.swing.JSpinner();
        shuffleButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        rightPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        numOfPlayersLabel.setFont(numOfPlayersLabel.getFont().deriveFont(numOfPlayersLabel.getFont().getStyle() | java.awt.Font.BOLD, numOfPlayersLabel.getFont().getSize()+4));
        org.openide.awt.Mnemonics.setLocalizedText(numOfPlayersLabel, Dict.Game.PLAYERS.toString());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        add(numOfPlayersLabel, gridBagConstraints);

        numberSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));
        numberSpinner.setMinimumSize(new java.awt.Dimension(64, 26));
        numberSpinner.setPreferredSize(new java.awt.Dimension(64, 26));
        numberSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(numberSpinner, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(shuffleButton, Dict.Game.SHUFFLE.toString());
        shuffleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(shuffleButton, gridBagConstraints);

        mainPanel.setLayout(new java.awt.GridLayout(1, 0, 8, 0));

        leftPanel.setLayout(new javax.swing.BoxLayout(leftPanel, javax.swing.BoxLayout.PAGE_AXIS));
        mainPanel.add(leftPanel);

        rightPanel.setLayout(new javax.swing.BoxLayout(rightPanel, javax.swing.BoxLayout.PAGE_AXIS));
        mainPanel.add(rightPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        add(mainPanel, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void numberSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberSpinnerStateChanged
        int players = (Integer) numberSpinner.getValue();
        for (int i = 0; i < mMaxNumOfPlayers; i++) {
            mCombos[i].setEnabled(i < players);
        }
    }//GEN-LAST:event_numberSpinnerStateChanged

    private void shuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleButtonActionPerformed
        int num = (Integer) numberSpinner.getValue();
        Random r = new Random();

        for (int i = 0; i < num; i++) {
            int swapWith = r.nextInt(num);
            int temp = mCombos[swapWith].getSelectedIndex();
            mCombos[swapWith].setSelectedIndex(mCombos[i].getSelectedIndex());
            mCombos[i].setSelectedIndex(temp);
        }
    }//GEN-LAST:event_shuffleButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel numOfPlayersLabel;
    private javax.swing.JSpinner numberSpinner;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton shuffleButton;
    // End of variables declaration//GEN-END:variables
}
